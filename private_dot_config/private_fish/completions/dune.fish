set -l commands printenv promote test build cache clean coq describe diagnostics exec external-lib-deps fmt format-dune-file help init install installed-libraries internal monitor ocaml ocaml-merlin pkg promotion rpc rules runtest show shutdown subst top uninstall upgrade utop
complete -c dune -f -d "composable build system for OCaml"

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "printenv" -d "An alias for env."
complete -c dune -n "__fish_seen_subcommand_from printenv" -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "field" -d "Only print this field. This option can be repeated multiple times to print multiple fields." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from printenv" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from printenv" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "promote" -d "An alias for promotion apply."
complete -c dune -n "__fish_seen_subcommand_from promote" -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from promote" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from promote" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from promote" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from promote" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from promote" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from promote" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from promote" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from promote" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from promote" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "test" -d "An alias for runtest."
complete -c dune -n "__fish_seen_subcommand_from test" -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from test" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from test" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from test" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from test" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from test" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from test" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from test" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from test" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from test" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from test" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from test" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from test" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from test" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from test" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from test" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from test" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from test" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from test" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from test" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from test" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from test" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from test" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from test" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from test" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from test" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from test" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from test" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from test" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from test" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from test" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from test" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from test" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "build" -d "Build the given targets, or the default ones if none are given."
complete -c dune -n "__fish_seen_subcommand_from build" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from build" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from build" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from build" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from build" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from build" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from build" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from build" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from build" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from build" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from build" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from build" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from build" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from build" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from build" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from build" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from build" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from build" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from build" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from build" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from build" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from build" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from build" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from build" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from build" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from build" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from build" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from build" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from build" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from build" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from build" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from build" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from build" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "cache" -d "Manage Dune\'s shared cache of build artifacts."
complete -c dune -n "__fish_seen_subcommand_from cache" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from cache" -l "version" -d "Show version information."

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "clean" -d "Clean the project."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from clean" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from clean" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from clean" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from clean" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from clean" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from clean" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from clean" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from clean" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from clean" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "coq" -d "Command group related to Coq."
complete -c dune -n "__fish_seen_subcommand_from coq" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from coq" -l "version" -d "Show version information."

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "describe" -d "Describe the workspace."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "context" -d "Build context to use." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "format" -d "FORMAT must be either sexp or csexp" -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "lang" -d "Behave the same as this version of Dune." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "sanitize-for-tests" -d "Sanitize the absolute paths in workspace items, and the associated UIDs, so that the output is reproducible."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from describe" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "with-deps" -d "Whether the dependencies between modules should be printed."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "with-pps" -d "Whether the dependencies towards ppx-rewriters (that are called at compile time) should be taken into account."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from describe" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from describe" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from describe" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from describe" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from describe" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from describe" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from describe" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from describe" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "diagnostics" -d "Fetch and return errors from the current build."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from diagnostics" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "exec" -d "Execute a command in a similar environment as if installation was performed."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "context" -d "Run the command in this build context." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "no-build" -d "don\'t rebuild target before executing"
complete -c dune -n "__fish_seen_subcommand_from exec" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from exec" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from exec" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from exec" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from exec" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from exec" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from exec" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from exec" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from exec" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from exec" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "external-lib-deps" -d "Moved to dune describe external-lib-deps."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "missing" -d "unused"
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "sexp" -d "unused"
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "unstable-by-dir" -d "unused"
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from external-lib-deps" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "fmt" -d "Format source code."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "preview" -d "Just print the changes that would be made without actually applying them. This takes precedence over auto-promote as that flag\nis assumed for this command."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from fmt" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from fmt" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "format-dune-file" -d "Format dune files."
complete -c dune -n "__fish_seen_subcommand_from format-dune-file" -rF
complete -c dune -n "__fish_seen_subcommand_from format-dune-file" -l "dune-version" -d "Which version of Dune language to use." -rF
complete -c dune -n "__fish_seen_subcommand_from format-dune-file" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from format-dune-file" -l "version" -d "Show version information."

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "help" -d "Additional Dune help."
complete -c dune -n "__fish_seen_subcommand_from help" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from help" -l "man-format" -d "Show output in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined." -rF
complete -c dune -n "__fish_seen_subcommand_from help" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from help" -l "version" -d "Show version information."

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "init" -d "Command group for initializing Dune components."
complete -c dune -n "__fish_seen_subcommand_from init" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from init" -l "version" -d "Show version information."

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "install" -d "Install packages defined in the workspace."
complete -c dune -n "__fish_seen_subcommand_from install" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "bindir" -d "Manually override the directory to install public binaries. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from install" -l "context" -d "Select context to install from. By default, install files from all defined contexts." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "create-install-files" -d "Do not directly install, but create install files in the root directory and create substituted files if needed in destdir\n(_destdir by default)."
complete -c dune -n "__fish_seen_subcommand_from install" -l "datadir" -d "Manually override the directory to install files from share section. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "destdir" -d "This directory is prepended to all installed paths." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from install" -l "docdir" -d "Manually override the directory to install documentation files. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "dry-run" -d "Only display the file operations that would be performed."
complete -c dune -n "__fish_seen_subcommand_from install" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "etcdir" -d "Manually override the directory to install configuration files. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from install" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "libdir" -d "Directory where library files are copied, relative to prefix or absolute. If --prefix is specified the default is \$prefix/lib.\nOnly absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "libexecdir" -d "Manually override the directory to install executable library files. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "mandir" -d "Manually override the directory to install man pages. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from install" -l "prefix" -d "Directory where files are copied. For instance binaries are copied into \$prefix/bin, library files into \$prefix/lib, etc..." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "relocatable" -d "Make the binaries relocatable (the installation directory can be moved). The installation directory must be specified with\n--prefix"
complete -c dune -n "__fish_seen_subcommand_from install" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "sbindir" -d "Manually override the directory to install files from sbin section. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "sections" -d "sections that should be installed" -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from install" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from install" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from install" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from install" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from install" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from install" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from install" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from install" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from install" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from install" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from install" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from install" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from install" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from install" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from install" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from install" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from install" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from install" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from install" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from install" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from install" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from install" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from install" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from install" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from install" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from install" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from install" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from install" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "installed-libraries" -d "Print out libraries installed on the system."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "not-available" -d "List libraries that are not available and explain why"
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from installed-libraries" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "internal" -d ""
complete -c dune -n "__fish_seen_subcommand_from internal" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from internal" -l "version" -d "Show version information."

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "monitor" -d "Connect to a Dune RPC server and monitor it."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "quit-on-disconnect" -d "Quit if the connection to the server is lost."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from monitor" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from monitor" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "ocaml" -d "Command group related to OCaml."
complete -c dune -n "__fish_seen_subcommand_from ocaml" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from ocaml" -l "version" -d "Show version information."

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "ocaml-merlin" -d "Start a merlin configuration server."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from ocaml-merlin" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "pkg" -d "Experimental package management"
complete -c dune -n "__fish_seen_subcommand_from pkg" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from pkg" -l "version" -d "Show version information."

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "promotion" -d "Control how changes are propagated back to source code."
complete -c dune -n "__fish_seen_subcommand_from promotion" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from promotion" -l "version" -d "Show version information."

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "rpc" -d "Dune\'s RPC mechanism. Experimental."
complete -c dune -n "__fish_seen_subcommand_from rpc" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from rpc" -l "version" -d "Show version information."

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "rules" -d "Dump rules."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -s "m" -l "makefile" -d "Output the rules in Makefile syntax."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from rules" -s "r" -l "recursive" -d "Print all rules needed to build the transitive dependencies of the given targets."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from rules" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from rules" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from rules" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from rules" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from rules" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from rules" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from rules" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from rules" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from rules" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "runtest" -d "Run tests."
complete -c dune -n "__fish_seen_subcommand_from runtest" -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from runtest" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from runtest" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "show" -d "Command group for showing information about the workspace"
complete -c dune -n "__fish_seen_subcommand_from show" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from show" -l "version" -d "Show version information."

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "shutdown" -d "Cancel and shutdown any builds in the current workspace."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from shutdown" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "subst" -d "Substitute watermarks in source files."
complete -c dune -n "__fish_seen_subcommand_from subst" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from subst" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from subst" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from subst" -l "version" -d "Show version information."

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "top" -d "Print a list of toplevel directives for including directories and loading cma files."
complete -c dune -n "__fish_seen_subcommand_from top" -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from top" -l "context" -d "Select context where to build/run utop." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from top" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from top" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from top" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from top" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from top" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from top" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from top" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from top" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from top" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from top" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from top" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from top" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from top" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from top" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from top" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from top" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from top" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from top" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from top" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from top" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from top" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from top" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from top" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from top" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from top" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from top" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from top" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from top" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from top" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from top" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from top" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "uninstall" -d "Uninstall packages defined in the workspace."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "bindir" -d "Manually override the directory to install public binaries. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "context" -d "Select context to install from. By default, install files from all defined contexts." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "create-install-files" -d "Do not directly install, but create install files in the root directory and create substituted files if needed in destdir\n(_destdir by default)."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "datadir" -d "Manually override the directory to install files from share section. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "destdir" -d "This directory is prepended to all installed paths." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "docdir" -d "Manually override the directory to install documentation files. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "dry-run" -d "Only display the file operations that would be performed."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "etcdir" -d "Manually override the directory to install configuration files. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "libdir" -d "Directory where library files are copied, relative to prefix or absolute. If --prefix is specified the default is \$prefix/lib.\nOnly absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "libexecdir" -d "Manually override the directory to install executable library files. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "mandir" -d "Manually override the directory to install man pages. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "prefix" -d "Directory where files are copied. For instance binaries are copied into \$prefix/bin, library files into \$prefix/lib, etc..." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "relocatable" -d "Make the binaries relocatable (the installation directory can be moved). The installation directory must be specified with\n--prefix"
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "sbindir" -d "Manually override the directory to install files from sbin section. Only absolute path accepted." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "sections" -d "sections that should be installed" -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from uninstall" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "upgrade" -d "Upgrade projects across major Dune versions."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from upgrade" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

complete -c dune -n "not __fish_seen_subcommand_from $commands" -x -a "utop" -d "Load library in utop."
complete -c dune -n "__fish_seen_subcommand_from utop" -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "action-stderr-on-success" -d "Same as --action-stdout-on-success but for standard error instead of standard output. A good default for large mono-repositories\nis --action-stdout-on-success=swallow --action-stderr-on-success=must-be-empty. This ensures that a successful build has a\n\"clean\" empty output." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "action-stdout-on-success" -d "Specify how to deal with the standard output of actions when they succeed. Possible values are: print to just print it to Dune\'s\noutput, swallow to completely ignore it and must-be-empty to enforce that the action printed nothing. With must-be-empty, Dune\nwill consider that the action failed if it printed something to its standard output. The default is print." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "build-info" -d "Show build information."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "context" -d "Select context where to build/run utop." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "display-separate-messages" -d "Separate error messages with a blank line."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "error-reporting" -d "Controls when the build errors are reported. early reports errors as soon as they are discovered. deterministic reports errors\nat the end of the build in a deterministic order. twice reports each error twice: once as soon as the error is discovered and\nthen again at the end of the build, in a deterministic order." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -s "f" -l "force" -d "Force actions associated to aliases to be re-executed even if their dependencies haven\'t changed."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "file-watcher" -d "Mechanism to detect changes in the source. Automatic to make dune run an external program to detect changes. Manual to notify\ndune that files have changed manually." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "passive-watch-mode" -d "Similar to [--watch], but only start a build when instructed externally by an RPC."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "sandbox" -d "Set sandboxing mode. Some actions require a certain sandboxing mode, so they will ignore this setting. The allowed values are:\nnone, symlink, copy, hardlink." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "stop-on-first-error" -d "Stop the build as soon as an error is encountered."
complete -c dune -n "__fish_seen_subcommand_from utop" -s "w" -l "watch" -d "Instead of terminating build after completion, wait continuously for file changes."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "wait-for-filesystem-clock" -d "Dune digest file contents for better incrementally. These digests are themselves cached. In some cases, Dune needs to drop some\ndigest cache entries in order for things to be reliable. This option makes Dune wait for the file system clock to advance so\nthat it doesn\'t need to drop anything. You should probably not care about this option; it is mostly useful for Dune developers\nto make Dune tests of the digest cache more reproducible."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "always-show-command-line" -d "Always show the full command lines of programs executed by dune."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "auto-promote" -d "Automatically promote files. This is similar to running dune promote after the build."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "build-dir" -d "Specified build directory. _build if unspecified" -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "cache" -d "Enable or disable Dune cache (either enabled or disabled). Default is \`disabled\'." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "cache-check-probability" -d "Check build reproducibility by re-executing randomly chosen rules and comparing their results with those stored in Dune cache.\nNote: by increasing the probability of such checks you slow down the build. The default probability is zero, i.e. no rules are\nchecked." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "cache-storage-mode" -d "Dune cache storage mode (one of auto, hardlink or copy). Default is \`auto\'." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "config-file" -d "Load this configuration file instead of the default one." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "debug-artifact-substitution" -d "Print debugging info about artifact substitution"
complete -c dune -n "__fish_seen_subcommand_from utop" -l "debug-backtraces" -d "Always print exception backtraces."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "debug-cache" -d "Show debug messages on cache misses for the given cache layers. Value is a comma-separated list of cache layer names. All\navailable cache layers: shared,workspace-local,fs." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "debug-dependency-path" -d "In case of error, print the dependency path from the targets on the command line to the rule that failed."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "debug-digests" -d "Explain why Dune decides to re-digest some files"
complete -c dune -n "__fish_seen_subcommand_from utop" -l "debug-load-dir" -d "Print debugging info about directory loading"
complete -c dune -n "__fish_seen_subcommand_from utop" -l "debug-store-digest-preimage" -d "Store digest preimage for all computed digests, so that it\'s possible to reverse them later, for debugging. The digests are\nstored in the shared cache (see --cache flag) as values, even if cache is otherwise disabled. This should be used only for\ndebugging, since it\'s slow and it litters the shared cache."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "default-target" -d "Set the default target that is used when none is specified to dune build." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "diff-command" -d "Shell command to use to diff files. Use - to disable printing the diff." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "disable-promotion" -d "Disable all promotion rules"
complete -c dune -n "__fish_seen_subcommand_from utop" -l "display" -d "Control the display mode of Dune. See dune-config(5) for more details. Valid values for this option are progress, verbose,\nshort, quiet or tui." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "dump-gc-stats" -d "Dump the garbage collector stats to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "dump-memo-graph" -d "Dump the dependency graph to a file after the build is complete." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "dump-memo-graph-format" -d "Set the file format used by --dump-memo-graph" -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "dump-memo-graph-with-timing" -d "Re-run each cached node in the Memo graph after building and include the run duration in the output of --dump-memo-graph. Since\nall nodes contain a cached value, each measurement will only account for a single node."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "help" -d "Show this help in format FMT. The value FMT must be one of auto, pager, groff or plain. With auto, the format is pager or plain\nwhenever the TERM env var is dumb or undefined."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "ignore-lock-dir" -d "Ignore dune.lock/ directory."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "ignore-promoted-rules" -d "Ignore rules with (mode promote), except ones with (only ...). The variable %{ignoring_promoted_rules} in dune files reflects\nwhether this option was passed or not."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "instrument-with" -d "Enable instrumentation by BACKENDS. BACKENDS is a comma-separated list of library names, each one of which must declare an\ninstrumentation backend." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "no-buffer" -d "Do not buffer the output of commands executed by dune. By default dune buffers the output of subcommands, in order to prevent\ninterleaving when multiple commands are executed in parallel. However, this can be an issue when debugging long running tests.\nWith --no-buffer, commands have direct access to the terminal. Note that as a result their output won\'t be captured in the log\nfile. You should use this option in conjunction with -j 1, to avoid interleaving. Additionally you should use --verbose as well,\nto make sure that commands are printed before they are being executed."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "no-config" -d "Do not load the configuration file"
complete -c dune -n "__fish_seen_subcommand_from utop" -l "no-print-directory" -d "Suppress \"Entering directory\" messages."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "only-packages" -d "Ignore stanzas referring to a package that is not in PACKAGES. PACKAGES is a comma-separated list of package names. Note that\nthis has the same effect as deleting the relevant stanzas from dune files. It is mostly meant for releases. During development,\nit is likely that what you want instead is to build a particular <package>.install target." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "print-metrics" -d "Print out various performance metrics after every build."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "profile" -d "Select the build profile, for instance dev or release. The default is dev." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "promote-install-files" -d "Promote any generated <package>.install files to the source tree."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "release" -d "Put dune into a reproducible release mode. Shorthand for --root . --ignore-promoted-rules --no-config --profile release\n--always-show-command-line --promote-install-files --require-dune-project-file --ignore-lock-dir --default-target @install. You\nshould use this option for release builds. For instance, you must use this option in your <package>.opam files. Except if you\nalready use -p, as -p implies this option."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "require-dune-project-file" -d "Fail if a dune-project file is missing."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "root" -d "Use this directory as workspace root instead of guessing it. Note that this option doesn\'t change the interpretation of targets\ngiven on the command line. It is only intended for scripts." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "store-orig-source-dir" -d "Store original source location in dune-package metadata."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "terminal-persistence" -d "Change how the log of build results are displayed to the console between rebuilds while in --watch mode. Supported modes:\npreserve, clear-on-rebuild, clear-on-rebuild-and-flush-history." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "trace-extended" -d "Output extended trace data (requires trace-file)."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "trace-file" -d "Output trace data in catapult format (compatible with chrome://tracing)." -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "verbose" -d "Same as --display verbose"
complete -c dune -n "__fish_seen_subcommand_from utop" -l "version" -d "Show version information."
complete -c dune -n "__fish_seen_subcommand_from utop" -l "watch-exclusions" -d "Adds a POSIX regular expression that will exclude matching directories from \`dune build --watch\`. The option --watch-exclusions\ncan be repeated to add multiple exclusions. Semicolons can be also used as a separator. If no exclusions are provided, then a\nstandard set of exclusions is used; however, if one or more --watch-exclusions are used, none of the standard exclusions are\nused. The standard exclusions are: ^_opam /_opam ^_esy /_esy ^\.#.* /\.#.* ~\$ ^#[^#]*#\$ /#[^#]*#\$ ^4913\$ /4913\$ /.git /.hg\n:/windows" -rF
complete -c dune -n "__fish_seen_subcommand_from utop" -l "workspace" -d "Use this specific workspace file instead of looking it up." -rF

set -l cache_commands clear size trim
complete -c dune -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from $cache_commands" -a clear -d "Clear the Dune cache."
complete -c dune -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from $cache_commands" -a size -d "Query the size of the Dune cache."
complete -c dune -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from $cache_commands" -a trim -d "Trim the Dune cache."

set -l coq_commands top
complete -c dune -n "__fish_seen_subcommand_from coq; and __fish_seen_subcommand_from $coq_commands" -rF
complete -c dune -n "__fish_seen_subcommand_from coq; and not __fish_seen_subcommand_from $coq_commands" -a top -d "Execute a Coq toplevel with the local configuration."

set -l describe_commands aliases env external-lib-deps installed-libraries opam-files package-entries pkg pp rules targets workspace
complete -c dune -n "__fish_seen_subcommand_from describe; and __fish_seen_subcommand_from $describe_commands" -rF
complete -c dune -n "__fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from $describe_commands" -a aliases -d "Print aliases in a given directory. Works similalry to ls."
complete -c dune -n "__fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from $describe_commands" -a env -d "Print the environment of a directory"
complete -c dune -n "__fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from $describe_commands" -a external-lib-deps -d "Print out external libraries needed to build the project. It\'s an approximated set of libraries."
complete -c dune -n "__fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from $describe_commands" -a installed-libraries -d "Print out libraries installed on the system."
complete -c dune -n "__fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from $describe_commands" -a opam-files -d "Print information about the opam files that have been discovered."
complete -c dune -n "__fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from $describe_commands" -a package-entries -d "prints information about the entries per package"
complete -c dune -n "__fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from $describe_commands" -a pkg -d "Subcommands related to package management"
complete -c dune -n "__fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from $describe_commands" -a pp -d "Build a given FILE and print the preprocessed output."
complete -c dune -n "__fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from $describe_commands" -a rules -d "Dump rules."
complete -c dune -n "__fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from $describe_commands" -a targets -d "Print targets in a given directory. Works similalry to ls."
complete -c dune -n "__fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from $describe_commands" -a workspace -d "Print a description of the workspace\'s structure. If some directories DIRS are provided, then only those directories of the\nworkspace are considered."

set -l init_commands executable library project test
complete -c dune -n "__fish_seen_subcommand_from init; and __fish_seen_subcommand_from $init_commands" -rF
complete -c dune -n "__fish_seen_subcommand_from init; and not __fish_seen_subcommand_from $init_commands" -a executable -d "A binary executable."
complete -c dune -n "__fish_seen_subcommand_from init; and not __fish_seen_subcommand_from $init_commands" -a library -d "An OCaml library."
complete -c dune -n "__fish_seen_subcommand_from init; and not __fish_seen_subcommand_from $init_commands" -a project -d "A project is a predefined composition of components arranged in a standard directory structure. The kind of project initialized\nis determined by the value of the --kind flag and defaults to an executable project, composed of a library, an executable, and a\ntest component."
complete -c dune -n "__fish_seen_subcommand_from init; and not __fish_seen_subcommand_from $init_commands" -a test -d "A test harness. (For inline tests, use the --inline-tests flag along with the other component kinds.)"

set -l internal_commands action-runner dump latest-lang-version
complete -c dune -n "__fish_seen_subcommand_from internal; and not __fish_seen_subcommand_from $internal_commands" -a action-runner -d ""
complete -c dune -n "__fish_seen_subcommand_from internal; and not __fish_seen_subcommand_from $internal_commands" -a dump -d "Dump the contents of a file stored in Dune\'s persistent database."
complete -c dune -n "__fish_seen_subcommand_from internal; and not __fish_seen_subcommand_from $internal_commands" -a latest-lang-version -d ""

set -l ocaml_commands doc dump-dot-merlin merlin ocaml-merlin top top-module utop
complete -c dune -n "__fish_seen_subcommand_from ocaml; and not __fish_seen_subcommand_from $ocaml_commands" -a doc -d "Build and view the documentation of an OCaml project"
complete -c dune -n "__fish_seen_subcommand_from ocaml; and not __fish_seen_subcommand_from $ocaml_commands" -a dump-dot-merlin -d "Print Merlin configuration"
complete -c dune -n "__fish_seen_subcommand_from ocaml; and not __fish_seen_subcommand_from $ocaml_commands" -a merlin -d "Command group related to merlin"
complete -c dune -n "__fish_seen_subcommand_from ocaml; and not __fish_seen_subcommand_from $ocaml_commands" -a ocaml-merlin -d "Start a merlin configuration server."
complete -c dune -n "__fish_seen_subcommand_from ocaml; and not __fish_seen_subcommand_from $ocaml_commands" -a top -d "Print a list of toplevel directives for including directories and loading cma files."
complete -c dune -n "__fish_seen_subcommand_from ocaml; and not __fish_seen_subcommand_from $ocaml_commands" -a top-module -d "Print a list of toplevel directives for loading a module into the topevel."
complete -c dune -n "__fish_seen_subcommand_from ocaml; and not __fish_seen_subcommand_from $ocaml_commands" -a utop -d "Load library in utop."

set -l pkg_commands lock outdated print-solver-env validate-lockdir
complete -c dune -n "__fish_seen_subcommand_from pkg; and __fish_seen_subcommand_from $pkg_commands" -rF
complete -c dune -n "__fish_seen_subcommand_from pkg; and not __fish_seen_subcommand_from $pkg_commands" -a lock -d "Create a lockfile"
complete -c dune -n "__fish_seen_subcommand_from pkg; and not __fish_seen_subcommand_from $pkg_commands" -a outdated -d "Check for outdated packages"
complete -c dune -n "__fish_seen_subcommand_from pkg; and not __fish_seen_subcommand_from $pkg_commands" -a print-solver-env -d "Print a description of the environment that would be used to solve dependencies and then exit without attempting to solve the\ndependencies or generate the lockfile. Intended to be used to debug situations where no solution can be found to a project\'s\ndependencies."
complete -c dune -n "__fish_seen_subcommand_from pkg; and not __fish_seen_subcommand_from $pkg_commands" -a validate-lockdir -d "Validate that a lockdir contains a solution for local packages"

set -l promotion_commands apply diff list
complete -c dune -n "__fish_seen_subcommand_from promotion; and __fish_seen_subcommand_from $promotion_commands" -rF
complete -c dune -n "__fish_seen_subcommand_from promotion; and not __fish_seen_subcommand_from $promotion_commands" -a apply -d "Promote files from the last run"
complete -c dune -n "__fish_seen_subcommand_from promotion; and not __fish_seen_subcommand_from $promotion_commands" -a diff -d "List promotions to be applied"
complete -c dune -n "__fish_seen_subcommand_from promotion; and not __fish_seen_subcommand_from $promotion_commands" -a list -d "List promotions files"

set -l rpc_commands build ping status
complete -c dune -n "__fish_seen_subcommand_from rpc; and not __fish_seen_subcommand_from $rpc_commands" -a build -d "build a given target (requires dune to be running in passive watching mode)"
complete -c dune -n "__fish_seen_subcommand_from rpc; and not __fish_seen_subcommand_from $rpc_commands" -a ping -d "Ping the build server running in the current directory"
complete -c dune -n "__fish_seen_subcommand_from rpc; and not __fish_seen_subcommand_from $rpc_commands" -a status -d "show active connections"

set -l show_commands aliases env external-lib-deps installed-libraries opam-files package-entries pkg pp rules targets workspace
complete -c dune -n "__fish_seen_subcommand_from show; and __fish_seen_subcommand_from $show_commands" -rF
complete -c dune -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $show_commands" -a aliases -d "Print aliases in a given directory. Works similalry to ls."
complete -c dune -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $show_commands" -a env -d "Print the environment of a directory"
complete -c dune -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $show_commands" -a external-lib-deps -d "Print out external libraries needed to build the project. It\'s an approximated set of libraries."
complete -c dune -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $show_commands" -a installed-libraries -d "Print out libraries installed on the system."
complete -c dune -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $show_commands" -a opam-files -d "Print information about the opam files that have been discovered."
complete -c dune -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $show_commands" -a package-entries -d "prints information about the entries per package"
complete -c dune -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $show_commands" -a pkg -d "Subcommands related to package management"
complete -c dune -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $show_commands" -a pp -d "Build a given FILE and print the preprocessed output."
complete -c dune -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $show_commands" -a rules -d "Dump rules."
complete -c dune -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $show_commands" -a targets -d "Print targets in a given directory. Works similalry to ls."
complete -c dune -n "__fish_seen_subcommand_from show; and not __fish_seen_subcommand_from $show_commands" -a workspace -d "Print a description of the workspace\'s structure. If some directories DIRS are provided, then only those directories of the\nworkspace are considered."
